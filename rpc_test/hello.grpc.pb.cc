// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto

#include "hello.pb.h"
#include "hello.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* Hello_method_names[] = {
  "/Hello/SayHello",
  "/Hello/SayWorld",
};

std::unique_ptr< Hello::Stub> Hello::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Hello::Stub> stub(new Hello::Stub(channel, options));
  return stub;
}

Hello::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(Hello_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayWorld_(Hello_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Hello::Stub::SayHello(::grpc::ClientContext* context, const ::HelloRequest& request, ::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::HelloRequest, ::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Hello::Stub::async::SayHello(::grpc::ClientContext* context, const ::HelloRequest* request, ::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::HelloRequest, ::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Hello::Stub::async::SayHello(::grpc::ClientContext* context, const ::HelloRequest* request, ::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* Hello::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::HelloResponse, ::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::HelloResponse>* Hello::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Hello::Stub::SayWorld(::grpc::ClientContext* context, const ::WorldRequest& request, ::WorldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::WorldRequest, ::WorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayWorld_, context, request, response);
}

void Hello::Stub::async::SayWorld(::grpc::ClientContext* context, const ::WorldRequest* request, ::WorldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::WorldRequest, ::WorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayWorld_, context, request, response, std::move(f));
}

void Hello::Stub::async::SayWorld(::grpc::ClientContext* context, const ::WorldRequest* request, ::WorldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayWorld_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WorldResponse>* Hello::Stub::PrepareAsyncSayWorldRaw(::grpc::ClientContext* context, const ::WorldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::WorldResponse, ::WorldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayWorld_, context, request);
}

::grpc::ClientAsyncResponseReader< ::WorldResponse>* Hello::Stub::AsyncSayWorldRaw(::grpc::ClientContext* context, const ::WorldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayWorldRaw(context, request, cq);
  result->StartCall();
  return result;
}

Hello::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Hello_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Hello::Service, ::HelloRequest, ::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Hello::Service* service,
             ::grpc::ServerContext* ctx,
             const ::HelloRequest* req,
             ::HelloResponse* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Hello_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Hello::Service, ::WorldRequest, ::WorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Hello::Service* service,
             ::grpc::ServerContext* ctx,
             const ::WorldRequest* req,
             ::WorldResponse* resp) {
               return service->SayWorld(ctx, req, resp);
             }, this)));
}

Hello::Service::~Service() {
}

::grpc::Status Hello::Service::SayHello(::grpc::ServerContext* context, const ::HelloRequest* request, ::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Hello::Service::SayWorld(::grpc::ServerContext* context, const ::WorldRequest* request, ::WorldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* System_method_names[] = {
  "/System/Exit",
};

std::unique_ptr< System::Stub> System::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< System::Stub> stub(new System::Stub(channel, options));
  return stub;
}

System::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Exit_(System_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status System::Stub::Exit(::grpc::ClientContext* context, const ::ExitRequest& request, ::ExitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ExitRequest, ::ExitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exit_, context, request, response);
}

void System::Stub::async::Exit(::grpc::ClientContext* context, const ::ExitRequest* request, ::ExitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ExitRequest, ::ExitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, std::move(f));
}

void System::Stub::async::Exit(::grpc::ClientContext* context, const ::ExitRequest* request, ::ExitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ExitResponse>* System::Stub::PrepareAsyncExitRaw(::grpc::ClientContext* context, const ::ExitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ExitResponse, ::ExitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ExitResponse>* System::Stub::AsyncExitRaw(::grpc::ClientContext* context, const ::ExitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExitRaw(context, request, cq);
  result->StartCall();
  return result;
}

System::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      System_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< System::Service, ::ExitRequest, ::ExitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](System::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ExitRequest* req,
             ::ExitResponse* resp) {
               return service->Exit(ctx, req, resp);
             }, this)));
}

System::Service::~Service() {
}

::grpc::Status System::Service::Exit(::grpc::ServerContext* context, const ::ExitRequest* request, ::ExitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


